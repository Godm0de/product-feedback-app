{
    "pipes": [],
    "interfaces": [
        {
            "name": "Comment",
            "id": "interface-Comment-e4d75f42f3352b9c05c63dd6564e14b1756158aa5a7c69b5f43b0b40b6957acb7d5dc008538c2461896e3fbd71d64ab79cffd74741113007e8e105a9afdeadd6",
            "file": "src/app/core/models/comment.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Reply } from './reply.model';\nimport { User } from './user.model';\n\nexport interface Comment {\n    id?: number;\n    content: string;\n    user: User;\n    replies?: Reply[];\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "replies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Reply[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Feedback",
            "id": "interface-Feedback-7c5797a6a55fa0db125ba2a4fa776df77fabb2cc363cfb74432a92249e07ada56903365eaab85220bddcce01320f396d0d419957ae4817ff591f2361eb8e13cc",
            "file": "src/app/core/models/feedback.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Comment } from './comment.model';\n\nexport interface Feedback {\n    id?: number;\n    title: string;\n    category: string;\n    upvotes: number;\n    status: string;\n    description: string;\n    comments?: Comment[];\n}\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Comment[]",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "upvotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Reply",
            "id": "interface-Reply-f85fa04352c29d76654fb405dec7c6ec94856b02816a23b5fe9dc3ee8b5cd5a83b62a9eae9a13dbf2e05a379045d3e32bf4616e80c6f676783313d18c280e52c",
            "file": "src/app/core/models/reply.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from './user.model';\n\nexport interface Reply {\n    content: string;\n    replyingTo: string;\n    user: User;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "replyingTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UIToastData",
            "id": "interface-UIToastData-1bd1c61a000c71fc77a6d876d4ea0aff216171ef222c8829cefe477452d50b6e30cb0f1f6d9ae7a12cee807bf5ec8d6811c82123d3bd01577f157f366f5a6b25",
            "file": "src/app/shared/ui-components/toast/ui-toast-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UIToastData {\n    message: string;\n    duration?: number;\n    close?: string;\n    position?: UIToastPosition;\n}\n\nexport type UIToastPosition = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center' | 'center';\n",
            "properties": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UIToastPosition",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-49d5fc9c65564f487b0f994f12db5220206ff243d19a967c05260d7f8e8e936e286de3e7d8e480eaeec468bd83cd4af017c2f8b67235d5372ef6d6d980f27885",
            "file": "src/app/core/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n    image: string;\n    name: string;\n    username: string;\n}\n",
            "properties": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CommentService",
            "id": "injectable-CommentService-bf6fb8d7e82f2b746d8efef073fb0d5736433a3bf9903ad5f8aad2b35a19a1622bee1ef751806c75430051be186656609f1eddd7608736b92725953066757e6d",
            "file": "src/app/core/http/comment.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createComment",
                    "args": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteComment",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommentDetail",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Comment>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComments",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Comment[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateComment",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { endpoints } from './endpoints';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CommentService {\n    constructor(private http: HttpClient) {}\n\n    createComment(comment: Comment): Observable<void> {\n        return this.http.post<void>(endpoints.comments, comment);\n    }\n\n    getCommentDetail(id: number): Observable<Comment> {\n        return this.http.get<Comment>(`${endpoints.comments}/${id}`);\n    }\n\n    getComments(): Observable<Comment[]> {\n        return this.http.get<Comment[]>(endpoints.comments);\n    }\n\n    updateComment(id: number, comment: Comment): Observable<void> {\n        return this.http.put<void>(`${endpoints.comments}/${id}`, comment);\n    }\n\n    deleteComment(id: number): Observable<void> {\n        return this.http.delete<void>(`${endpoints.comments}/${id}`);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FeedbackService",
            "id": "injectable-FeedbackService-01ff95d253dbb36b4102b77020fe41f6e4d6ac1c8f7b511e70ad01ff568136ca9629f714d57429a9c1f7b8b3fda3b0355726f5709b67ebc04b8126eb48d5251d",
            "file": "src/app/core/http/feedback.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createFeedback",
                    "args": [
                        {
                            "name": "feedback",
                            "type": "Feedback",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedback",
                            "type": "Feedback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFeedback",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFeedbackDetail",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Feedback | undefined>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFeedbackList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Feedback[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateFeedback",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "feedback",
                            "type": "Feedback",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "feedback",
                            "type": "Feedback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport data from '../mocks/data.json';\nimport { Feedback } from '../models/feedback.model';\nimport { endpoints } from './endpoints';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FeedbackService {\n    constructor(private http: HttpClient) {}\n\n    createFeedback(feedback: Feedback): Observable<void> {\n        return this.http.post<void>(endpoints.feedbacks, feedback);\n    }\n\n    getFeedbackDetail(id: number): Observable<Feedback | undefined> {\n        const feedback = data.productRequests.find((x) => x.id === id);\n        return new BehaviorSubject<Feedback | undefined>(feedback).asObservable();\n    }\n\n    getFeedbackList(): Observable<Feedback[]> {\n        return new BehaviorSubject<Feedback[]>(data.productRequests).asObservable();\n    }\n\n    updateFeedback(id: number, feedback: Feedback): Observable<void> {\n        return this.http.put<void>(`${endpoints.feedbacks}/${id}`, feedback);\n    }\n\n    deleteFeedback(id: number): Observable<void> {\n        return this.http.delete<void>(`${endpoints.feedbacks}/${id}`);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReplyService",
            "id": "injectable-ReplyService-97acd977a96562850652cf23be0d3ec0a4f7be7b68c2dfe90aa3c4d08ce8482e3bc338c3948500b64ea482112aee2489bbbe5b29edb623a5859a1794a7d0745a",
            "file": "src/app/core/http/reply.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createReply",
                    "args": [
                        {
                            "name": "reply",
                            "type": "Reply",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reply",
                            "type": "Reply",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteReply",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReplies",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Reply[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getReplyDetail",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Reply>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateReply",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reply",
                            "type": "Reply",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reply",
                            "type": "Reply",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Reply } from '../models/reply.model';\nimport { endpoints } from './endpoints';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ReplyService {\n    constructor(private http: HttpClient) {}\n\n    createReply(reply: Reply): Observable<void> {\n        return this.http.post<void>(endpoints.replies, reply);\n    }\n\n    getReplyDetail(id: number): Observable<Reply> {\n        return this.http.get<Reply>(`${endpoints.replies}/${id}`);\n    }\n\n    getReplies(): Observable<Reply[]> {\n        return this.http.get<Reply[]>(endpoints.replies);\n    }\n\n    updateReply(id: number, reply: Reply): Observable<void> {\n        return this.http.put<void>(`${endpoints.replies}/${id}`, reply);\n    }\n\n    deleteReply(id: number): Observable<void> {\n        return this.http.delete<void>(`${endpoints.replies}/${id}`);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TranslocoHttpLoader",
            "id": "injectable-TranslocoHttpLoader-5ccb1d6465eb1b52a67b732370bfd47d524e05ce79443df804d1c0bb0c4a731098685225f6c5f9948c22acb9d91ec3969fb7b1cebee4dc5fb5a9bd120d939b26",
            "file": "src/app/transloco-root.module.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule\n} from '@ngneat/transloco';\nimport { Injectable, NgModule } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [ TranslocoModule ],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en'],\n        defaultLang: 'en',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      })\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader }\n  ]\n})\nexport class TranslocoRootModule {}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UiSelectService",
            "id": "injectable-UiSelectService-e044c8f66af32fe84e07d78049507e6dfaff05d6b7129751ca9c17b98751a080fc0eef12ef3ba7d96714ee2cbf5709cdc22c92bf5d3d293b2032cee1b526987a",
            "file": "src/app/shared/ui-components/select/ui-select.service.ts",
            "properties": [
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UISelectPanelComponent",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "UISelectPanelComponent",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "select",
                            "type": "UISelectPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "select",
                            "type": "UISelectPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { UISelectPanelComponent } from './select-panel/ui-select-panel.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UiSelectService {\n    private select!: UISelectPanelComponent;\n\n    public register(select: UISelectPanelComponent) {\n        this.select = select;\n    }\n\n    public getSelect(): UISelectPanelComponent {\n        return this.select;\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "UIToastService",
            "id": "injectable-UIToastService-123fecb088c7e76a6854bd0b47aca60e4bf93968c36aa4bdbcca2b1113cddf16451139385d81edd7c1943ba696c51e1dd1db61c8c26e931171485e55545339d0",
            "file": "src/app/shared/ui-components/toast/ui-toast.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<UIToastComponent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "UIToastData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "UIToastComponent"
                    ],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<UIToastComponent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "UIToastData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Overlay, ComponentType } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, Injector } from '@angular/core';\nimport { UIToastData } from './ui-toast-data';\nimport { UIToastRef } from './ui-toast-ref';\nimport { UI_TOAST_DATA } from './ui-toast-tokens';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UIToastService {\n    constructor(private overlay: Overlay, private injector: Injector) {}\n\n    open<UIToastComponent>(component: ComponentType<UIToastComponent>, data: UIToastData) {\n        const positionStrategy = this.overlay.position().global().centerHorizontally().bottom();\n\n        const overlayRef = this.overlay.create({\n            positionStrategy,\n        });\n\n        const toastRef = new UIToastRef(overlayRef);\n\n        const injector = Injector.create({\n            parent: this.injector,\n            providers: [\n                { provide: UIToastRef, useValue: toastRef },\n                { provide: UI_TOAST_DATA, useValue: data },\n            ],\n        });\n\n        const portal = new ComponentPortal(component, null, injector);\n        overlayRef.attach(portal);\n\n        return toastRef;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-d1d8b8b39f960ec593a7319a98e5653c9b342c3f83275be0e4b61285f3ca6f46fedf28a4944a6f6077586ea27d099af6a901416343e7c16d06d6bd0f15940a14",
            "file": "src/app/core/http/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAuthendicatedUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport data from '../mocks/data.json';\nimport { User } from '../models/user.model';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UserService {\n    constructor(private http: HttpClient) {}\n\n    getAuthendicatedUser(): Observable<User> {\n        return new BehaviorSubject<User>(data.currentUser).asObservable();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "UIToastRef",
            "id": "class-UIToastRef-a1f50e2062f971efc8c7e4f84636cc7595323a90c133792d7379263eee1dc9c0ac814961510f48e710cbe5bae77ba8462f4e155b7a447601623439e6d537b2d3",
            "file": "src/app/shared/ui-components/toast/ui-toast-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { OverlayRef } from '@angular/cdk/overlay';\nimport { Subject, Observable } from 'rxjs';\n\nexport class UIToastRef {\n    private afterClosedSubject: Subject<any> = new Subject();\n\n    constructor(private overlayRef: OverlayRef) {}\n\n    public close(data?: any) {\n        this.overlayRef.dispose();\n        this.afterClosedSubject.next(data);\n        this.afterClosedSubject.complete();\n    }\n\n    public afterClosed(): Observable<any> {\n        return this.afterClosedSubject.asObservable();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayRef",
                        "type": "OverlayRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "overlayRef",
                        "type": "OverlayRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "afterClosedSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "afterClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BannerSubtitleDirective",
            "id": "directive-BannerSubtitleDirective-8be170e1d4fe83eabfdd4ce7709e2cd0f3148ad2c387d3f67b8e5b23f9053fe846eb4b8b59a0b8f4ad2f156de2ef399fae309e4cfdb6069155e7cad11b2d2ae5",
            "file": "src/app/modules/suggestions/components/banner/banner.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    selector: '[app-banner-title]',\n})\nexport class BannerTitleDirective {\n    @HostBinding('class') class = 'banner__title';\n}\n\n@Directive({\n    selector: '[app-banner-subtitle]',\n})\nexport class BannerSubtitleDirective {\n    @HostBinding('class') class = 'banner__subtitle';\n}\n",
            "selector": "[app-banner-subtitle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'banner__subtitle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'banner__subtitle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "BannerTitleDirective",
            "id": "directive-BannerTitleDirective-8be170e1d4fe83eabfdd4ce7709e2cd0f3148ad2c387d3f67b8e5b23f9053fe846eb4b8b59a0b8f4ad2f156de2ef399fae309e4cfdb6069155e7cad11b2d2ae5",
            "file": "src/app/modules/suggestions/components/banner/banner.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    selector: '[app-banner-title]',\n})\nexport class BannerTitleDirective {\n    @HostBinding('class') class = 'banner__title';\n}\n\n@Directive({\n    selector: '[app-banner-subtitle]',\n})\nexport class BannerSubtitleDirective {\n    @HostBinding('class') class = 'banner__subtitle';\n}\n",
            "selector": "[app-banner-title]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'banner__title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'banner__title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "EmptyFeedbacksBodyDirective",
            "id": "directive-EmptyFeedbacksBodyDirective-2bf75979a2b97a0e56575488f0a5e35749197346a2e8d15c2954ae5a99391f98c7ec78bb31ed7317deb9e73df0bb87648ebac4701e8b780a04bc9c0ea3268ff4",
            "file": "src/app/modules/suggestions/components/empty-feedbacks/empty-feedbacks.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[empty-feedbacks-body]',\n})\nexport class EmptyFeedbacksBodyDirective {\n    @HostBinding('class') class = 'empty-feedbacks__body';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[empty-feedbacks-title]',\n})\nexport class EmptyFeedbacksTitleDirective {\n    @HostBinding('class') class = 'empty-feedbacks__title';\n}\n",
            "selector": "[empty-feedbacks-body]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'empty-feedbacks__body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'empty-feedbacks__body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "EmptyFeedbacksTitleDirective",
            "id": "directive-EmptyFeedbacksTitleDirective-2bf75979a2b97a0e56575488f0a5e35749197346a2e8d15c2954ae5a99391f98c7ec78bb31ed7317deb9e73df0bb87648ebac4701e8b780a04bc9c0ea3268ff4",
            "file": "src/app/modules/suggestions/components/empty-feedbacks/empty-feedbacks.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[empty-feedbacks-body]',\n})\nexport class EmptyFeedbacksBodyDirective {\n    @HostBinding('class') class = 'empty-feedbacks__body';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[empty-feedbacks-title]',\n})\nexport class EmptyFeedbacksTitleDirective {\n    @HostBinding('class') class = 'empty-feedbacks__title';\n}\n",
            "selector": "[empty-feedbacks-title]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'empty-feedbacks__title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'empty-feedbacks__title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "FeedbackCardContentDirective",
            "id": "directive-FeedbackCardContentDirective-9b6a1fce083b1d6319142f98d41a4a89959523c571f641d38e69b793eb7c6479f0cb65c7de4d78accf192972caffbe08f06b6faf80700ccfabf9d92e3c083e79",
            "file": "src/app/shared/ui-components/feedback-card/feeed-card.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-side]',\n})\nexport class FeedbackCardSideDirective {\n    @HostBinding('class') class = 'feedback-card__aside';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-title]',\n})\nexport class FeedbackCardTitleDirective {\n    @HostBinding('class') class = 'feedback-card__title';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-content]',\n})\nexport class FeedbackCardContentDirective {\n    @HostBinding('class') class = 'feedback-card__content';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-footer]',\n})\nexport class FeedbackCardFooterDirective {\n    @HostBinding('class') class = 'feedback-card__footer';\n}\n",
            "selector": "[feedback-card-content]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'feedback-card__content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'feedback-card__content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "FeedbackCardFooterDirective",
            "id": "directive-FeedbackCardFooterDirective-9b6a1fce083b1d6319142f98d41a4a89959523c571f641d38e69b793eb7c6479f0cb65c7de4d78accf192972caffbe08f06b6faf80700ccfabf9d92e3c083e79",
            "file": "src/app/shared/ui-components/feedback-card/feeed-card.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-side]',\n})\nexport class FeedbackCardSideDirective {\n    @HostBinding('class') class = 'feedback-card__aside';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-title]',\n})\nexport class FeedbackCardTitleDirective {\n    @HostBinding('class') class = 'feedback-card__title';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-content]',\n})\nexport class FeedbackCardContentDirective {\n    @HostBinding('class') class = 'feedback-card__content';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-footer]',\n})\nexport class FeedbackCardFooterDirective {\n    @HostBinding('class') class = 'feedback-card__footer';\n}\n",
            "selector": "[feedback-card-footer]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'feedback-card__footer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'feedback-card__footer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "FeedbackCardSideDirective",
            "id": "directive-FeedbackCardSideDirective-9b6a1fce083b1d6319142f98d41a4a89959523c571f641d38e69b793eb7c6479f0cb65c7de4d78accf192972caffbe08f06b6faf80700ccfabf9d92e3c083e79",
            "file": "src/app/shared/ui-components/feedback-card/feeed-card.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-side]',\n})\nexport class FeedbackCardSideDirective {\n    @HostBinding('class') class = 'feedback-card__aside';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-title]',\n})\nexport class FeedbackCardTitleDirective {\n    @HostBinding('class') class = 'feedback-card__title';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-content]',\n})\nexport class FeedbackCardContentDirective {\n    @HostBinding('class') class = 'feedback-card__content';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-footer]',\n})\nexport class FeedbackCardFooterDirective {\n    @HostBinding('class') class = 'feedback-card__footer';\n}\n",
            "selector": "[feedback-card-side]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'feedback-card__aside'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'feedback-card__aside'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "FeedbackCardTitleDirective",
            "id": "directive-FeedbackCardTitleDirective-9b6a1fce083b1d6319142f98d41a4a89959523c571f641d38e69b793eb7c6479f0cb65c7de4d78accf192972caffbe08f06b6faf80700ccfabf9d92e3c083e79",
            "file": "src/app/shared/ui-components/feedback-card/feeed-card.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-side]',\n})\nexport class FeedbackCardSideDirective {\n    @HostBinding('class') class = 'feedback-card__aside';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-title]',\n})\nexport class FeedbackCardTitleDirective {\n    @HostBinding('class') class = 'feedback-card__title';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-content]',\n})\nexport class FeedbackCardContentDirective {\n    @HostBinding('class') class = 'feedback-card__content';\n}\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[feedback-card-footer]',\n})\nexport class FeedbackCardFooterDirective {\n    @HostBinding('class') class = 'feedback-card__footer';\n}\n",
            "selector": "[feedback-card-title]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'feedback-card__title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'feedback-card__title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "UIBadgeDirective",
            "id": "directive-UIBadgeDirective-83edf177ea6aaf3f75b53fd3c8b48c8d601e10a22a1757ab30c67cd9adddb6a82c06b2c76e83e20ddd83c0a608661d6d1f6814c7c0a3e1886f4b076013d620e1",
            "file": "src/app/shared/ui-components/badge/ui-badge.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[ui-badge]',\n})\nexport class UIBadgeDirective implements OnChanges, OnDestroy {\n    @Input() value!: number;\n\n    private badgeElement: HTMLElement | null = null;\n    private regex = new RegExp(/^[0-9]\\d*$/);\n\n    constructor(@Inject(DOCUMENT) private document: Document, private elRef: ElementRef<HTMLElement>) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('value' in changes) {\n            const value = `${changes['value'].currentValue}`.trim();\n            if (value?.length > 0 && this.regex.test(value)) {\n                this.updateBadge(value);\n            } else {\n                this.updateBadge('0');\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.badgeElement) {\n            this.elRef.nativeElement.removeChild(this.badgeElement);\n            this.badgeElement.remove();\n        }\n    }\n\n    private createBadge(value: string): HTMLElement {\n        const badge = this.document.createElement('span');\n        badge.classList.add('ui-badge');\n        badge.textContent = value;\n        this.elRef.nativeElement.classList.add('ui-badge-container'); // add class to parent element\n        this.elRef.nativeElement.appendChild(badge); // add badge to parent element\n        return badge;\n    }\n\n    private updateBadge(value: string): void {\n        if (!this.badgeElement) {\n            this.badgeElement = this.createBadge(value);\n        } else {\n            this.badgeElement.textContent = value;\n        }\n    }\n}\n",
            "selector": "[ui-badge]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "badgeElement",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "regex",
                    "defaultValue": "new RegExp(/^[0-9]\\d*$/)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createBadge",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBadge",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UIButtonDirective",
            "id": "directive-UIButtonDirective-fcbe2fa9d0495a3ceb20dbd09c7d31df02b7f50f221eecd071689c8e129bb31437ea6423fec1d07ff9da8d1434005d363f6c83492938b071cc87663f8308546f",
            "file": "src/app/shared/ui-components/button/ui-button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input } from '@angular/core';\n\nexport type ButtonColors = 'primary' | 'secondary' | 'light' | 'dark' | 'error' | 'default';\nexport type ButtonType = 'button' | 'submit' | 'reset';\nexport type ButtonSize = 'long' | 'default';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[ui-button]',\n    // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n    host: {\n        class: 'ui-button',\n        '[class.ui-button--primary]': 'color === \"primary\"',\n        '[class.ui-button--secondary]': 'color === \"secondary\"',\n        '[class.ui-button--dark]': 'color === \"dark\"',\n        '[class.ui-button--light]': 'color === \"light\"',\n        '[class.ui-button--error]': 'color === \"error\"',\n        '[class.ui-button--long]': 'size === \"long\"',\n    },\n})\nexport class UIButtonDirective {\n    @Input() color: ButtonColors = 'default';\n    @Input() size: ButtonSize = 'default';\n}\n",
            "selector": "[ui-button]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "ButtonColors",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ButtonSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "UIInputDirective",
            "id": "directive-UIInputDirective-b072c59f65fe201c101f88dc00277f6b9ad132f7c31ecca3a36b2d5db2df040b0bca19e0b559941efbaf82ce7025ec49b75cf142a75755d9b3d0793bc2e1bf55",
            "file": "src/app/shared/ui-components/input/ui-input.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: '[uiInput]',\n})\nexport class UIInputDirective {\n    @HostBinding('class') elementClass = 'ui-input';\n}\n",
            "selector": "[uiInput]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementClass",
                    "defaultValue": "'ui-input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-889ed38e04fa7c2d39bbc2867e4b452ac4e97f8b3f29d35aaedcb014410f822a58386a1a35d4872eeb96f12fcb5dbb34482c931ca93e12ac1133f91c362b80a9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"container\"><router-outlet></router-outlet></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    template: `<div class=\"container\"><router-outlet></router-outlet></div>`,\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "BackBtnComponent",
            "id": "component-BackBtnComponent-4c84d55fe7f901696fa397c19976d4331571fabf4a783b66f436d28c935e8e2b91437b10b3181e010af1dc5a63d467100c1f63343a6788d7517eea21b6b754cd",
            "file": "src/app/modules/feedback/components/back-btn/back-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-back-btn",
            "styleUrls": [
                "./back-btn.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./back-btn.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "back",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-back-btn',\n    templateUrl: './back-btn.component.html',\n    styleUrls: ['./back-btn.component.scss'],\n})\nexport class BackBtnComponent {\n    constructor(private location: Location) {}\n\n    back() {\n        this.location.back();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n\n.back {\n    display: flex;\n    gap: 1.2294rem;\n    color: colors.$dark-color;\n    font-weight: bold;\n    cursor: pointer;\n\n    &:hover {\n        text-decoration: underline;\n    }\n}\n",
                    "styleUrl": "./back-btn.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<span class=\"back\" (click)=\"back()\">\n    <ui-icon name=\"arrow-left\"></ui-icon>\n    <ng-content></ng-content>\n</span>\n"
        },
        {
            "name": "BannerComponent",
            "id": "component-BannerComponent-7e18004769c1c755a3424c1890c5483eeec4f64497ede2ebd22d292eb46c5e5644c4f05de65cec5fa6f7894b785b2eafd774f65cb171313107a63ba019c74188",
            "file": "src/app/modules/suggestions/components/banner/banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-banner",
            "styleUrls": [
                "./banner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-banner',\n    templateUrl: './banner.component.html',\n    styleUrls: ['./banner.component.scss'],\n})\nexport class BannerComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n\n.banner {\n    background: url('/assets/images/suggestions/desktop/background-header.png') no-repeat center center;\n    background-size: cover;\n    padding: 1.5rem;\n    border-radius: 0.625rem;\n\n    height: 8.5625rem;\n    color: colors.$white-color;\n\n    width: 100%;\n\n    &__subtitle {\n        font-size: var(--fs-body-2);\n    }\n}\n",
                    "styleUrl": "./banner.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"banner\">\n    <div class=\"banner__title\">\n        <ng-content select=\"[app-banner-title]\"></ng-content>\n    </div>\n    <div class=\"banner__subtitle\">\n        <ng-content select=\"[app-banner-subtitle]\"></ng-content>\n    </div>\n</div>\n"
        },
        {
            "name": "CategoryFilterComponent",
            "id": "component-CategoryFilterComponent-9ac80d3ceefade3d2a7cb5deffa2221bb1877da070c61318f50f4f9f74f727b1c8750e913117a929a4ed7f94460bf6cc0444dda613c9827a1564d92f81bb834c",
            "file": "src/app/modules/suggestions/components/category-filter/category-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-filter",
            "styleUrls": [
                "./category-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "categorySelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[\n        {\n            name: 'all',\n            selected: true,\n        },\n        {\n            name: 'ui',\n            selected: false,\n        },\n        {\n            name: 'ux',\n            selected: false,\n        },\n        {\n            name: 'enhancement',\n            selected: false,\n        },\n        {\n            name: 'bug',\n            selected: false,\n        },\n        {\n            name: 'feature',\n            selected: false,\n        },\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getCategoryActive",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCategory",
                    "args": [
                        {
                            "name": "categoryName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n    selector: 'app-category-filter',\n    templateUrl: './category-filter.component.html',\n    styleUrls: ['./category-filter.component.scss'],\n})\nexport class CategoryFilterComponent {\n    @Output() categorySelected = new EventEmitter<string>();\n\n    categories = [\n        {\n            name: 'all',\n            selected: true,\n        },\n        {\n            name: 'ui',\n            selected: false,\n        },\n        {\n            name: 'ux',\n            selected: false,\n        },\n        {\n            name: 'enhancement',\n            selected: false,\n        },\n        {\n            name: 'bug',\n            selected: false,\n        },\n        {\n            name: 'feature',\n            selected: false,\n        },\n    ];\n\n    setCategory(categoryName: string) {\n        this.categories.forEach((c) => (c.selected = c.name === categoryName));\n\n        this.categorySelected.emit(categoryName);\n    }\n\n    getCategoryActive(category: string) {\n        return this.categories.filter((c) => c.name === category)[0].selected;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: flex;\n    flex-wrap: wrap;\n    row-gap: 1.125rem;\n    column-gap: 0.5rem;\n    background: white;\n    padding: 1.5rem;\n\n    border-radius: 0.625rem;\n}\n",
                    "styleUrl": "./category-filter.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ui-chip-list *transloco=\"let t\" aria-label=\"Feedbacks category filter\">\n    <ui-chip *ngFor=\"let category of categories\" [active]=\"getCategoryActive(category.name)\" (click)=\"setCategory(category.name)\">{{\n        t('categoriesFeedbackFilter.' + category.name)\n    }}</ui-chip>\n</ui-chip-list>\n"
        },
        {
            "name": "EmptyFeedbacksComponent",
            "id": "component-EmptyFeedbacksComponent-057a08c06a521da201a1ffdaf56ad6c06bfffedf50033535d89462c9cba678ab12918c620c800ce4af999cdcb77bd6b3ebf9740920551e5f00d024ea351c3a77",
            "file": "src/app/modules/suggestions/components/empty-feedbacks/empty-feedbacks.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-empty-feedbacks",
            "styleUrls": [
                "./empty-feedbacks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty-feedbacks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'app-empty-feedbacks',\n    templateUrl: './empty-feedbacks.component.html',\n    styleUrls: ['./empty-feedbacks.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class EmptyFeedbacksComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".empty-feedbacks {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 37.5rem;\n\n    background: white;\n    border-radius: 0.625rem;\n\n    &__image {\n        min-height: 8.5463rem;\n        min-width: auto;\n    }\n    &__title {\n        margin: 3.3287rem 0 0 0;\n    }\n\n    &__body {\n        margin: 1rem 0 3rem 0;\n        text-align: center;\n        max-width: 45ch;\n    }\n}\n",
                    "styleUrl": "./empty-feedbacks.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"empty-feedbacks\">\n    <img src=\"/assets/images/suggestions/illustration-empty.svg\" alt=\"There is not feedbacks\" class=\"empty-feedbacks__image\" />\n    <ng-content select=\"[empty-feedbacks-title]\"></ng-content>\n    <ng-content select=\"[empty-feedbacks-body]\"></ng-content>\n    <ng-content select=\"[empty-feedbacks-button]\"></ng-content>\n</div>\n"
        },
        {
            "name": "FeedbackCardComponent",
            "id": "component-FeedbackCardComponent-49f69f245cb6108770e4eab831f2974f16d4b4fc3d2786ef2241f6f4385e25695aebef7b631c92c560f71b48f6f16db233bdbcef4dadae9f6d8f7b133151b8b8",
            "file": "src/app/shared/ui-components/feedback-card/feedback-card.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feedback-card",
            "styleUrls": [
                "./feedback-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feedback-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'app-feedback-card',\n    templateUrl: './feedback-card.component.html',\n    styleUrls: ['./feedback-card.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class FeedbackCardComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n@use 'tools/media';\n\n$class: 'feedback-card';\n\n:host {\n    display: block;\n}\n\n.#{$class} {\n    display: flex;\n    align-items: flex-start;\n    background-color: colors.$white-color;\n    border-radius: 0.625rem;\n    padding: 1.75rem 2rem;\n    gap: 2.25rem;\n\n    @include media.mobile {\n        flex-direction: column;\n        gap: 1rem;\n    }\n\n    &__title {\n        margin-top: 0;\n    }\n\n    &__body {\n        width: 100%;\n    }\n\n    &__content {\n        display: flex;\n        justify-content: space-between;\n        width: 100%;\n        gap: 1rem;\n    }\n\n    &__title {\n        margin-bottom: 0.25rem;\n    }\n\n    &__text {\n        margin-top: 0;\n        margin-bottom: 1rem;\n    }\n\n    &__side {\n        @include media.mobile {\n            order: 1;\n            width: 100%;\n        }\n    }\n}\n",
                    "styleUrl": "./feedback-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"feedback-card\">\n    <div class=\"feedback-card__side\">\n        <ng-content select=\"[feedback-card-aside]\"></ng-content>\n    </div>\n    <article class=\"feedback-card__body\">\n        <div class=\"feedback-card__title\">\n            <ng-content select=\"[feedback-card-title]\"></ng-content>\n        </div>\n\n        <div class=\"feedback-card__content\">\n            <ng-content select=\"[feedback-card-content]\"></ng-content>\n        </div>\n\n        <div class=\"feedback-card__footer\">\n            <ng-content select=\"[feedback-card-footer]\"></ng-content>\n        </div>\n    </article>\n</div>\n"
        },
        {
            "name": "FeedbackDetailComponent",
            "id": "component-FeedbackDetailComponent-36d187cbc70c50e444884c36b315b56e9da100c666ac1ab1fe4efb4cc524fa505817242d4d74426cdf85198736afa244f267a46fa72f02bd454c3098616bc142",
            "file": "src/app/modules/feedback/layouts/feedback-detail/feedback-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feedback-detail",
            "styleUrls": [
                "./feedback-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feedback-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Feedback",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { FeedbackService } from 'src/app/core/http/feedback.service';\nimport { Feedback } from 'src/app/core/models/feedback.model';\n\n@Component({\n    selector: 'app-feedback-detail',\n    templateUrl: './feedback-detail.component.html',\n    styleUrls: ['./feedback-detail.component.scss'],\n})\nexport class FeedbackDetailComponent implements OnInit, OnDestroy {\n    subscription: Subscription = new Subscription();\n    id: number = 0;\n    feedback!: Feedback;\n\n    constructor(private readonly feedbackService: FeedbackService, private route: ActivatedRoute) {}\n\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n    ngOnInit(): void {\n        this.id = Number(this.route.snapshot.paramMap.get('id'));\n\n        this.subscription.add(\n            this.feedbackService.getFeedbackDetail(this.id).subscribe((feedback) => {\n                this.feedback = feedback as Feedback;\n            })\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".layout {\n    margin: 3.9375rem;\n}\n\n.toolbar {\n    margin-bottom: 0.625rem;\n}\n",
                    "styleUrl": "./feedback-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "feedbackService",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "feedbackService",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<section class=\"layout\">\n    <ui-toolbar class=\"toolbar\" justify=\"between\" background=\"transparent\">\n        <app-back-btn>Go Back</app-back-btn>\n        <button ui-button color=\"secondary\">Edit Feedback</button>\n    </ui-toolbar>\n    <app-feedback-card>\n        <ui-counter feedback-card-aside class=\"hide-mobile\" [activeAfterFirstClick]=\"true\" [initValue]=\"feedback.upvotes\"></ui-counter>\n        <ng-container feedback-card-aside>\n            <section class=\"show-only-mobile\">\n                <div class=\"feedback-aside-mobile\">\n                    <ui-counter order=\"row\" [activeAfterFirstClick]=\"true\" [initValue]=\"feedback.upvotes\"></ui-counter>\n                    <ui-icon name=\"comments\" ui-badge></ui-icon>\n                </div>\n            </section>\n        </ng-container>\n        <h3 feedback-card-title>{{ feedback.title }}</h3>\n        <div feedback-card-content>\n            <p class=\"text\">{{ feedback.description }}</p>\n            <ui-icon class=\"hide-mobile\" name=\"comments\" ui-badge [value]=\"feedback.comments ? feedback.comments.length : 0\"></ui-icon>\n        </div>\n        <ui-chip feedback-card-footer [selectable]=\"false\">{{ feedback.category | titlecase }}</ui-chip>\n    </app-feedback-card>\n</section>\n"
        },
        {
            "name": "SuggestionsLayoutComponent",
            "id": "component-SuggestionsLayoutComponent-62e4a5628fdc2fb49501478e708df4d91d428ec525a1466b8e6ff8d2dcbc5f9ed345285e09d8eaee2aa2bcfdcecd250d69830ffa656b66373eb4d8f99de39c31",
            "file": "src/app/modules/suggestions/layout/suggestions-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-suggestions-layout",
            "styleUrls": [
                "./suggestions-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./suggestions-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "feedbacks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Feedback[]>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "filterFeedbacks",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFeedbacksFiltered",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Feedback[]>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map, Observable } from 'rxjs';\nimport { FeedbackService } from 'src/app/core/http/feedback.service';\nimport { Feedback } from 'src/app/core/models/feedback.model';\n\n@Component({\n    selector: 'app-suggestions-layout',\n    templateUrl: './suggestions-layout.component.html',\n    styleUrls: ['./suggestions-layout.component.scss'],\n})\nexport class SuggestionsLayoutComponent implements OnInit {\n    feedbacks$!: Observable<Feedback[]>;\n\n    constructor(private feedbacks: FeedbackService, private router: Router) {\n        this.feedbacks$ = feedbacks.getFeedbackList();\n    }\n\n    ngOnInit(): void {\n        this.feedbacks$ = this.feedbacks.getFeedbackList();\n    }\n\n    filterFeedbacks(category: string) {\n        this.feedbacks$ = category !== 'all' ? this.getFeedbacksFiltered(category) : this.feedbacks.getFeedbackList();\n    }\n\n    private getFeedbacksFiltered(category: string): Observable<Feedback[]> {\n        return this.feedbacks\n            .getFeedbackList()\n            .pipe(map((feedbacks: Feedback[]) => feedbacks.filter((feedback: Feedback) => feedback.category === category)));\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'tools/mixins';\n\n// Layout\n.layout {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 1.875rem;\n    padding: 5.875rem 0 8.0625rem 0;\n\n    .main {\n        flex: 1;\n        flex-grow: 315;\n    }\n\n    .aside {\n        display: flex;\n        flex-direction: column;\n        gap: 1.5rem;\n        flex-basis: 15.9375rem;\n        flex-grow: 1;\n    }\n}\n\n.pointer {\n    cursor: pointer;\n}\n\n// Feedback card margins\n.feedback-list {\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n}\n\n// Feedback aside mobile\n.feedback-aside-mobile {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n}\n\n// Toolbar classes\n.toolbar {\n    margin-bottom: 1.5rem;\n\n    &__header {\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n    }\n}\n",
                    "styleUrl": "./suggestions-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "feedbacks",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "feedbacks",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *transloco=\"let t\" class=\"layout\">\n    <aside class=\"aside\">\n        <app-banner>\n            <h2 app-banner-title class=\"text-white\">{{ t('title') }}</h2>\n            <span app-banner-subtitle>{{ t('subtitle') }}</span>\n        </app-banner>\n        <app-category-filter (categorySelected)=\"filterFeedbacks($event)\"></app-category-filter>\n    </aside>\n    <main class=\"main\">\n        <ui-toolbar class=\"toolbar\" justify=\"between\">\n            <div class=\"toolbar__header\">\n                <img src=\"/assets/images/suggestions/icon-suggestions.svg\" alt=\"\" />\n                <h3 class=\"text-white\">{{ (feedbacks$ | async)?.length }} {{ t('toolbarTitle') }}</h3>\n            </div>\n            <button ui-button color=\"primary\"><ui-icon name=\"plus\"></ui-icon> {{ t('createFeedbackLabelButton') }}</button>\n        </ui-toolbar>\n        <section class=\"feedback-list\" *ngIf=\"(feedbacks$ | async)!.length > 0\">\n            <app-feedback-card class=\"pointer\" *ngFor=\"let feedback of feedbacks$ | async\" routerLink=\"/feedback/detail/{{ feedback.id }}\">\n                <ui-counter\n                    feedback-card-aside\n                    class=\"hide-mobile\"\n                    [activeAfterFirstClick]=\"true\"\n                    [initValue]=\"feedback.upvotes\"\n                ></ui-counter>\n                <ng-container feedback-card-aside>\n                    <section class=\"show-only-mobile\">\n                        <div class=\"feedback-aside-mobile\">\n                            <ui-counter order=\"row\" [activeAfterFirstClick]=\"true\" [initValue]=\"feedback.upvotes\"></ui-counter>\n                            <ui-icon name=\"comments\" ui-badge [value]=\"feedback.comments ? feedback.comments.length : 0\"></ui-icon>\n                        </div>\n                    </section>\n                </ng-container>\n                <h3 feedback-card-title>{{ feedback.title }}</h3>\n                <div feedback-card-content>\n                    <p class=\"text\">{{ feedback.description }}</p>\n                    <ui-icon\n                        class=\"hide-mobile\"\n                        name=\"comments\"\n                        ui-badge\n                        [value]=\"feedback.comments ? feedback.comments.length : 0\"\n                    ></ui-icon>\n                </div>\n                <ui-chip feedback-card-footer [selectable]=\"false\">{{ feedback.category | titlecase }}</ui-chip>\n            </app-feedback-card>\n        </section>\n        <app-empty-feedbacks *ngIf=\"(feedbacks$ | async)!.length === 0\">\n            <h1 empty-feedbacks-title>{{ t('emptyFeedbackList.title') }}</h1>\n            <p empty-feedbacks-body>{{ t('emptyFeedbackList.description') }}</p>\n            <button ui-button color=\"primary\" empty-feedbacks-button>\n                <ui-icon name=\"plus\"></ui-icon> {{ t('createFeedbackLabelButton') }}\n            </button>\n        </app-empty-feedbacks>\n    </main>\n</div>\n"
        },
        {
            "name": "UIChipComponent",
            "id": "component-UIChipComponent-96838e9ff2216fbbbb57386013e5ae2fb506312beeffbe3daea63addac3a21969bf67cf08da534ecb02241a95e9ecea4bc565c381cde945f4db5dd3818161eae",
            "file": "src/app/shared/ui-components/chips/chip/ui-chip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-chip",
            "styleUrls": [
                "./ui-chip.component.scss"
            ],
            "styles": [],
            "template": "<span class=\"ui-chip\" [class.ui-chip--active]=\"active\" [class.ui-chip--selected]=\"selectable\" #text>       <ng-content></ng-content>\n   </span>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "textElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'text'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-chip',\n    template: ` <span class=\"ui-chip\" [class.ui-chip--active]=\"active\" [class.ui-chip--selected]=\"selectable\" #text>\n        <ng-content></ng-content>\n    </span>`,\n    styleUrls: ['./ui-chip.component.scss'],\n})\nexport class UIChipComponent {\n    @ViewChild('text') textElement!: ElementRef;\n    @Input() selectable: boolean = true;\n    @Input() value: string = '';\n    @Input() active: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n\n.ui-chip {\n    display: inline-block;\n    font-weight: 600;\n    padding: 0.39em 1.153em;\n    border-radius: 0.625rem;\n    background-color: colors.$chips-background-color;\n    color: colors.$secondary-color;\n\n    &--selected:hover {\n        background-color: darken(colors.$chips-background-color, 10%);\n        color: colors.$secondary-color;\n        cursor: pointer;\n    }\n\n    &--active {\n        background-color: colors.$secondary-color;\n        color: colors.$light-text-color;\n\n        &:hover {\n            background-color: colors.$secondary-color;\n            color: colors.$light-text-color;\n        }\n    }\n}\n",
                    "styleUrl": "./ui-chip.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "UIChipListComponent",
            "id": "component-UIChipListComponent-d0720196e16750c80f1cdffae3b307e68d192a60b7889b8457f5472588be789c7c7be2704402aa472288bbedcae507bcf8b0af2bf98c7f4c016087e36ab7b04b",
            "file": "src/app/shared/ui-components/chips/chip-list/ui-chip-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-chip-list",
            "styleUrls": [
                "./ui-chip-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ui-chip-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-chip-list',\n    templateUrl: './ui-chip-list.component.html',\n    styleUrls: ['./ui-chip-list.component.scss'],\n})\nexport class UIChipListComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ui-chip-list {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n\n    row-gap: 1.125rem;\n    column-gap: 0.5rem;\n}\n",
                    "styleUrl": "./ui-chip-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"ui-chip-list\">\n    <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "UICounterComponent",
            "id": "component-UICounterComponent-3594bdbafd320282690e80c24b0bf678e25b57d0868e02c8e0156e971c7a1e37671fd990cd9265ce3b85e643d09b0f54062c58121261541ec437828cf828f773",
            "file": "src/app/shared/ui-components/counter/ui-counter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => UICounterComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "ui-counter",
            "styleUrls": [
                "./ui-counter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ui-counter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeAfterFirstClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "limitCounterTo",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "order",
                    "defaultValue": "'column'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "\"column\" | \"row\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "increment",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-counter',\n    templateUrl: './ui-counter.component.html',\n    styleUrls: ['./ui-counter.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UICounterComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UICounterComponent implements ControlValueAccessor, OnInit {\n    @Input() limitCounterTo: number = -1;\n    @Input() initValue: number = 0;\n    @Input() activeAfterFirstClick: boolean = false;\n    @Input() order: 'column' | 'row' = 'column';\n    public active: boolean = false;\n    public value: number = 0;\n\n    onChange: any = () => {};\n\n    onTouch: any = () => {};\n\n    increment(event: any): void {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!this.active) {\n            this.value++;\n            this.onChange(this.value);\n            this.writeValue(this.value);\n            this.active = !this.activeAfterFirstClick ? this.value === this.limitCounterTo : true;\n        } else {\n            this.value = this.value < 0 ? 0 : this.value;\n        }\n    }\n\n    ngOnInit(): void {\n        this.value = this.initValue;\n        this.onChange(this.value);\n        this.writeValue(this.value);\n    }\n\n    // controlValueAccessor methods\n    writeValue(value: number): void {\n        this.value = value;\n    }\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this.onChange = fn;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n\n.ui-counter {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\n    max-width: 2.5rem;\n    min-height: 3.3125rem;\n    padding: 0.39em 1.153em;\n    border-radius: 0.625rem;\n\n    font-weight: 600;\n    background-color: colors.$chips-background-color;\n    color: colors.$text-color;\n    cursor: pointer;\n\n    &__value {\n        font-size: 0.8125rem;\n    }\n\n    &--row {\n        flex-direction: row;\n        gap: 0.625rem;\n        padding: 0.375rem 2rem;\n    }\n\n    &:hover {\n        background-color: darken(colors.$chips-background-color, 10%);\n        color: colors.$secondary-color;\n    }\n\n    &:active {\n        background-color: darken(colors.$chips-background-color, 20%);\n        color: colors.$secondary-color;\n    }\n\n    &--active {\n        background-color: colors.$secondary-color;\n        color: colors.$light-text-color;\n\n        .ui-counter__icon {\n            filter: brightness(0) invert(1);\n        }\n\n        &:hover {\n            background-color: colors.$secondary-color;\n            color: colors.$light-text-color;\n        }\n    }\n\n    &__icon {\n        width: 1rem;\n        height: auto;\n        margin-bottom: 0.5rem;\n    }\n}\n",
                    "styleUrl": "./ui-counter.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "templateData": "<span class=\"ui-counter\" (click)=\"increment($event)\" [class.ui-counter--active]=\"active\" [class.ui-counter--row]=\"order === 'row'\">\n    <img class=\"ui-counter__icon\" src=\"assets/images/icons/icon-arrow-up.svg\" alt=\"counter icon\" />\n    <span class=\"ui-counter__value\">{{ value }}</span>\n</span>\n"
        },
        {
            "name": "UIDividerComponent",
            "id": "component-UIDividerComponent-47cc2fe23b5e56842434924fd8f1713d2e71401193d6279824cd8ecbcbab80128563ef6d9080063d7c6a9fdce9a9af628014625efbaba4178a5f8fbdda2828e6",
            "file": "src/app/shared/ui-components/divider/ui-divider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-divider",
            "styleUrls": [
                "./ui-divider.component.scss"
            ],
            "styles": [],
            "template": "<hr class=\"ui-divider\" />",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-divider',\n    template: `<hr class=\"ui-divider\" />`,\n    styleUrls: ['./ui-divider.component.scss'],\n})\nexport class UIDividerComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n\n.ui-divider {\n    border: 0;\n    border-top: 1px solid colors.$text-color;\n}\n",
                    "styleUrl": "./ui-divider.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "UIIconComponent",
            "id": "component-UIIconComponent-3ae5dff24db3b1d7fefc3e158b56a0b6f8c3198c7b9986fc619039a9cbb02ab35a6eee4df921179fbfd081f646efd1fdb1c85080ab30d78cbb3b2c17189f2e45",
            "file": "src/app/shared/ui-components/icon/ui-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ui-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'desktop'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"desktop\" | \"mobile\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getIconPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nexport const ICONS_BASE_PATH = '/assets/images/icons';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-icon',\n    templateUrl: './ui-icon.component.html',\n})\nexport class UIIconComponent {\n    @Input() name!: string;\n    @Input() type: 'desktop' | 'mobile' = 'desktop';\n\n    getIconPath(): string {\n        return this.type === 'desktop'\n            ? `${ICONS_BASE_PATH}/icon-${this.name}.svg`\n            : `${ICONS_BASE_PATH}/${this.type}/icon-${this.name}.svg`;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<img *ngIf=\"name\" [src]=\"getIconPath()\" alt=\"\"/>\n"
        },
        {
            "name": "UISelectOptionComponent",
            "id": "component-UISelectOptionComponent-466e23ae6d40cac5637661413008a4e8f99a77c3527238cda27d0df78889613042caa4a4c81543b0ad85a99d6ecaca7c1728ffe20a838fd7aa4a15f9d6982e5f",
            "file": "src/app/shared/ui-components/select/select-option/ui-select-option.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-select-option",
            "styleUrls": [
                "./ui-select-option.component.scss"
            ],
            "styles": [],
            "template": "<button class=\"ui-select-option\" [class.ui-select-option--selected]=\"selected\" #text>        <ng-content></ng-content><img *ngIf=\"selected\" src=\"assets/images/icons/icon-check.svg\" alt=\"\" />\n    </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "textElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'text'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, HostListener, Input, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { UiSelectService } from '../ui-select.service';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-select-option',\n    template: `<button class=\"ui-select-option\" [class.ui-select-option--selected]=\"selected\" #text>\n        <ng-content></ng-content><img *ngIf=\"selected\" src=\"assets/images/icons/icon-check.svg\" alt=\"\" />\n    </button> `,\n    styleUrls: ['./ui-select-option.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class UISelectOptionComponent {\n    @Input() value: string = '';\n    @ViewChild('text') textElement!: ElementRef;\n    selected: boolean = false;\n\n    constructor(private select: UiSelectService) {}\n\n    @HostListener('click', ['$event'])\n    click() {\n        this.select.getSelect().selectOption(this);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n\n.ui-select-option {\n    background: transparent;\n    color: colors.$text-color;\n    border: none;\n    padding: 0.75rem 1.5rem;\n    cursor: pointer;\n    width: 100%;\n\n    text-align: left;\n\n    &:hover {\n        color: colors.$primary-color;\n    }\n\n    &--selected {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n}\n",
                    "styleUrl": "./ui-select-option.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "select",
                        "type": "UiSelectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "select",
                        "type": "UiSelectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UISelectPanelComponent",
            "id": "component-UISelectPanelComponent-7c184b1c6d89910c2d8b5cc45fd720921ee738c582d933763617848ef8b286c69747f2a4b257577277138334abcd3ad6eff685dc0052e8c66a78a6959b15fc54",
            "file": "src/app/shared/ui-components/select/select-panel/ui-select-panel.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => UISelectPanelComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "ui-select",
            "styleUrls": [
                "./ui-select-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ui-select-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isDropdownOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "onChangeFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "onTouchedFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<UISelectOptionComponent>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "UISelectOptionComponent"
                        }
                    ]
                },
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UISelectOptionComponent",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "UISelectOptionComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "UISelectOptionComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ContentChildren, forwardRef, Input, QueryList, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeInOut } from '@shared/ui-components/animations/fade.animation';\nimport { UISelectOptionComponent } from '../select-option/ui-select-option.component';\nimport { UiSelectService } from '../ui-select.service';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-select',\n    templateUrl: './ui-select-panel.component.html',\n    styleUrls: ['./ui-select-panel.component.scss'],\n    animations: [fadeInOut],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UISelectPanelComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UISelectPanelComponent implements AfterViewInit, ControlValueAccessor {\n    @Input() selected: string = '';\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n\n    @ContentChildren(UISelectOptionComponent) options!: QueryList<UISelectOptionComponent>;\n\n    selectedOption!: UISelectOptionComponent;\n    displayedText: string = '';\n\n    isDropdownOpen: boolean = false;\n\n    constructor(private select: UiSelectService) {\n        this.select.register(this);\n    }\n\n    ngAfterViewInit(): void {\n        if (this.selected !== '') {\n            this.setSelected();\n        }\n    }\n\n    onTouchedFn = () => {};\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onChangeFn = (_: any) => {};\n\n    toggleDropdown() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        this.isDropdownOpen ? (this.isDropdownOpen = false) : (this.isDropdownOpen = true);\n    }\n\n    selectOption(option: UISelectOptionComponent) {\n        this.selectedOption = option;\n        this.selected = option.value;\n        this.displayedText = this.selectedOption && this.selected !== '' ? option.textElement.nativeElement.innerText : '';\n        this.isDropdownOpen = false;\n        this.setSelected();\n        this.onChangeFn(this.selected);\n    }\n\n    onOpened() {\n        this.isDropdownOpen = true;\n        this.onTouchedFn();\n    }\n\n    onClose() {\n        this.isDropdownOpen = false;\n    }\n\n    setSelected() {\n        this.options.forEach((opt) => (opt.selected = opt.value === this.selected));\n    }\n\n    writeValue(fn: any): void {\n        this.onChangeFn = fn;\n    }\n    registerOnChange(fn: any): void {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedFn = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n\n.ui-selector {\n    background-color: colors.$bg-input-color;\n    padding: 0.8125em 1.5em;\n    border-radius: 5px;\n    width: fit-content;\n    cursor: pointer;\n\n    &__input {\n        border: 0;\n        background-color: inherit;\n        cursor: pointer;\n\n        &:focus {\n            outline: none;\n        }\n    }\n\n    &--active {\n        outline: 1px solid colors.$outline-active-color;\n    }\n\n    &--error {\n        outline: 1px solid colors.$outline-error-color;\n    }\n\n    &--focus {\n        outline: 1px solid colors.$outline-active-color;\n    }\n}\n\n.ui-select-panel {\n    display: flex;\n    flex-direction: column;\n\n    min-width: 15.9375rem;\n    background-color: white;\n    border-radius: 0.625rem;\n    box-shadow: 0px 0.625rem 2.5rem -0.4375rem rgba(55, 63, 104, 0.350492);\n\n    & > ui-select-option:not(:last-child) {\n        border: none;\n        border-bottom: 1px solid hsla(0, 0, 53, 45%);\n    }\n}\n",
                    "styleUrl": "./ui-select-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "select",
                        "type": "UiSelectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "select",
                        "type": "UiSelectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div\n    class=\"ui-selector\"\n    [class.ui-selector--focus]=\"isDropdownOpen\"\n    cdkOverlayOrigin\n    (click)=\"toggleDropdown()\"\n    #trigger=\"cdkOverlayOrigin\"\n>\n    <input class=\"ui-selector__input\" [value]=\"displayedText\" [placeholder]=\"placeholder\" type=\"text\" readonly autocomplete=\"off\" />\n    <img class=\"ui-selector__icon\" src=\"assets/images/icons/icon-arrow-down.svg\" alt=\"Arrow down icon\" />\n</div>\n\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayLockPosition\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n    [cdkConnectedOverlayOrigin]=\"trigger\"\n    [cdkConnectedOverlayOpen]=\"isDropdownOpen\"\n    (backdropClick)=\"isDropdownOpen = false\"\n    (opened)=\"onOpened()\"\n    (closed)=\"onClosed()\"\n>\n    <div class=\"ui-select-panel\" @fadeInOut>\n        <ng-content></ng-content>\n    </div>\n</ng-template>\n"
        },
        {
            "name": "UIToastComponent",
            "id": "component-UIToastComponent-b494e94fe07fa51838c91ee3696b55dd73db06d237a3df5f46e6a900e125da6c1f3c15a5b6d9ef483ee2126c78a1b5299b68b07a479de206ba20ab0c8dcb5014",
            "file": "src/app/shared/ui-components/toast/ui-toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-toast",
            "styleUrls": [
                "./ui-toast.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"ui-toast\" @fadeInOut>       <span class=\"ui-toast__text\">{{ data.message }}</span>\n       <button class=\"ui-toast__button\" *ngIf=\"data.close\" (click)=\"close()\">{{ data.close }}</button>\n   </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "intervalId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { UIToastData } from './ui-toast-data';\nimport { UIToastRef } from './ui-toast-ref';\nimport { UI_TOAST_DATA } from './ui-toast-tokens';\nimport { fadeInOut } from '../animations/fade.animation';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-toast',\n    template: ` <div class=\"ui-toast\" @fadeInOut>\n        <span class=\"ui-toast__text\">{{ data.message }}</span>\n        <button class=\"ui-toast__button\" *ngIf=\"data.close\" (click)=\"close()\">{{ data.close }}</button>\n    </div>`,\n    styleUrls: ['./ui-toast.component.scss'],\n    animations: [fadeInOut],\n})\nexport class UIToastComponent implements OnInit, OnDestroy {\n    private intervalId!: ReturnType<typeof setTimeout>;\n\n    constructor(private toastRef: UIToastRef, @Inject(UI_TOAST_DATA) readonly data: UIToastData) {}\n\n    ngOnDestroy(): void {\n        if (this.intervalId) {\n            clearTimeout(this.intervalId);\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.data.duration) {\n            this.intervalId = setTimeout(() => {\n                this.close();\n            }, this.data.duration);\n        }\n    }\n\n    close() {\n        this.toastRef.close();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n@use 'settings/typography';\n\n.ui-toast {\n    position: relative;\n    margin: 0.625rem;\n    padding: 0.5rem 1rem;\n\n    background-color: colors.$toast-background-color;\n    color: lighten(colors.$toast-background-color, 35%);\n    border-radius: 0.3125rem;\n    font-size: var(--fs-button);\n\n    &__button {\n        background-color: transparent;\n        border: 0;\n        font-size: var(--fs-button);\n        color: lighten(colors.$toast-background-color, 35%);\n\n        margin-left: 1.25rem;\n\n        cursor: pointer;\n    }\n}\n",
                    "styleUrl": "./ui-toast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastRef",
                        "type": "UIToastRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "UIToastData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "toastRef",
                        "type": "UIToastRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "UIToastData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "UIToolbarComponent",
            "id": "component-UIToolbarComponent-f0acc8721ec8e624df8e0293978082925c8c7a3b844467612d3825661cbd2be41fbaa26db3b128c6a4c4f9000ee3bf5a2476751a3a97a84cb229a3ea6f4ec32a",
            "file": "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-toolbar",
            "styleUrls": [
                "./ui-toolbar.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"ui-toolbar\" [ngClass]=\"getJustifyClass()\" [class.bg-transparent]=\"background === 'transparent'\">        <ng-content></ng-content>\n    </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "background",
                    "defaultValue": "'none'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"transparent\" | \"none\"",
                    "decorators": []
                },
                {
                    "name": "justify",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "JusfityType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getJustifyClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nexport type JusfityType = 'start' | 'end' | 'center' | 'between' | 'around';\n\nexport const JUSTIFY_CSS_CLASES = {\n    start: 'ui-toolbar--start',\n    end: 'ui-toolbar--end',\n    center: 'ui-toolbar--center',\n    between: 'ui-toolbar--between',\n    around: 'ui-toolbar--around',\n};\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: 'ui-toolbar',\n    template: `<div class=\"ui-toolbar\" [ngClass]=\"getJustifyClass()\" [class.bg-transparent]=\"background === 'transparent'\">\n        <ng-content></ng-content>\n    </div> `,\n    styleUrls: ['./ui-toolbar.component.scss'],\n})\nexport class UIToolbarComponent {\n    @Input() justify: JusfityType = 'start';\n    @Input() background: 'transparent' | 'none' = 'none';\n\n    getJustifyClass(): string {\n        return JUSTIFY_CSS_CLASES[this.justify];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'settings/colors';\n\n:host {\n    display: block;\n}\n\n.ui-toolbar {\n    display: flex;\n    padding: 0.875rem 1rem;\n    background-color: colors.$toolbar-background-color;\n    border-radius: 0.625rem;\n    color: colors.$light-text-color;\n\n    &--between {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    &--around {\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n    }\n\n    &--end {\n        justify-content: flex-end;\n        align-items: center;\n    }\n\n    &--center {\n        justify-content: center;\n        align-items: center;\n    }\n\n    &--start {\n        justify-content: flex-start;\n        align-items: center;\n    }\n}\n",
                    "styleUrl": "./ui-toolbar.component.scss"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-026f7b2e689f0d925a83e8c7482cf6c61bbdacfd6890e9b4b2e10d438c81b2f21e07996eb0f0547b287d978163ea6a2cc4e85dcbb6f97ce348277d2b91974271",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SuggestionsModule } from './modules/suggestions/suggestions.module';\nimport { TranslocoRootModule } from './transloco-root.module';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        HttpClientModule,\n        TranslocoRootModule,\n\n        // Modules\n        SuggestionsModule,\n    ],\n    providers: [],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SuggestionsModule"
                        },
                        {
                            "name": "TranslocoRootModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-73c169430b7ce3932bb1a37f2df5429e0b9db97173081a68c172cb3b399e57332338900adc7866a6cd8df463bdaedbd6cf680f57ca7fcd2e0c438c7cb851bd5e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n    {\n        path: '',\n        loadChildren: () => \"import('./modules/suggestions/suggestions.module').then((m) => m.SuggestionsModule)\",\n    },\n\n    {\n        path: 'feedback',\n        loadChildren: () => \"import('./modules/feedback/feedback.module').then((m) => m.FeedbackModule)\",\n    },\n\n    {\n        path: '**',\n        redirectTo: '',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BannerModule",
            "id": "module-BannerModule-6238079d61596ac4da4f680dfc49a4befbf53a435cb8b9d4006a6f50a5ceda77269f175091b245c769eff3a34513cd467cca5abacd5e122636b6341f66403897",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/suggestions/components/banner/banner.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BannerComponent } from './banner.component';\nimport { BannerSubtitleDirective, BannerTitleDirective } from './banner.directive';\n\n@NgModule({\n    declarations: [BannerTitleDirective, BannerSubtitleDirective, BannerComponent],\n    imports: [CommonModule],\n    exports: [BannerTitleDirective, BannerSubtitleDirective, BannerComponent],\n})\nexport class BannerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BannerComponent"
                        },
                        {
                            "name": "BannerSubtitleDirective"
                        },
                        {
                            "name": "BannerTitleDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BannerComponent"
                        },
                        {
                            "name": "BannerSubtitleDirective"
                        },
                        {
                            "name": "BannerTitleDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EmptyFeedbacksModule",
            "id": "module-EmptyFeedbacksModule-081271e4856f40522ca623e944cc661ba0418d18260b11be25ae8aa671a6d4a4c2a094f8735c891ffd1bc24392be5bbda210d779c39bb0a2ac40d7307c9a7d9f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/suggestions/components/empty-feedbacks/empty-feedbacks.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EmptyFeedbacksComponent } from './empty-feedbacks.component';\nimport { EmptyFeedbacksBodyDirective, EmptyFeedbacksTitleDirective } from './empty-feedbacks.directive';\n\n@NgModule({\n    declarations: [EmptyFeedbacksComponent, EmptyFeedbacksBodyDirective, EmptyFeedbacksTitleDirective],\n    imports: [CommonModule],\n    exports: [EmptyFeedbacksComponent, EmptyFeedbacksBodyDirective, EmptyFeedbacksTitleDirective],\n})\nexport class EmptyFeedbacksModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EmptyFeedbacksBodyDirective"
                        },
                        {
                            "name": "EmptyFeedbacksComponent"
                        },
                        {
                            "name": "EmptyFeedbacksTitleDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EmptyFeedbacksBodyDirective"
                        },
                        {
                            "name": "EmptyFeedbacksComponent"
                        },
                        {
                            "name": "EmptyFeedbacksTitleDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeedbackModule",
            "id": "module-FeedbackModule-c3271bc22c8562c2b7519cfc6e1fb23fdb04f5e77ff5b116563d0f6c6080e232662c2819d6014544d25e67a414bead1b40b5c7e9d5b984b95b2aa829a72a4a33",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/feedback/feedback.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { UIBadgeModule } from '@shared/ui-components/badge/ui-badge.module';\nimport { UIButtonModule } from '@shared/ui-components/button/ui-button.module';\nimport { UIChipsModule } from '@shared/ui-components/chips/ui-chips.module';\nimport { UICounterModule } from '@shared/ui-components/counter/ui-counter.module';\nimport { UIFeedbackCardModule } from '@shared/ui-components/feedback-card/feedback-card.module';\nimport { UIIconModule } from '@shared/ui-components/icon/ui-icon.module';\nimport { UIToolbarModule } from '@shared/ui-components/toolbar/ui-toolbar.module';\nimport { BackBtnComponent } from './components/back-btn/back-btn.component';\nimport { FeedbackDetailComponent } from './layouts/feedback-detail/feedback-detail.component';\n\nconst routes: Routes = [\n    {\n        path: 'detail/:id',\n        component: FeedbackDetailComponent,\n    },\n];\n\n@NgModule({\n    declarations: [FeedbackDetailComponent, BackBtnComponent],\n    imports: [\n        CommonModule,\n        RouterModule.forChild(routes),\n        UIToolbarModule,\n        UIButtonModule,\n        UIIconModule,\n        UIFeedbackCardModule,\n        UICounterModule,\n        UIChipsModule,\n        UIBadgeModule,\n    ],\n    exports: [RouterModule],\n})\nexport class FeedbackModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BackBtnComponent"
                        },
                        {
                            "name": "FeedbackDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UIBadgeModule"
                        },
                        {
                            "name": "UIButtonModule"
                        },
                        {
                            "name": "UIChipsModule"
                        },
                        {
                            "name": "UICounterModule"
                        },
                        {
                            "name": "UIFeedbackCardModule"
                        },
                        {
                            "name": "UIIconModule"
                        },
                        {
                            "name": "UIToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SuggestionsModule",
            "id": "module-SuggestionsModule-d741fb8e667c8b70b621bc9eb0a8fddb2890bdcde55f20d493faa72a62b2fb7b8f2312485f299e42e822c13868b334961ff0e1e44c84e65f426df932933cac93",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/suggestions/suggestions.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TranslocoModule } from '@ngneat/transloco';\nimport { UIBadgeModule } from '@shared/ui-components/badge/ui-badge.module';\nimport { UIButtonModule } from '@shared/ui-components/button/ui-button.module';\nimport { UIChipsModule } from '@shared/ui-components/chips/ui-chips.module';\nimport { UICounterModule } from '@shared/ui-components/counter/ui-counter.module';\nimport { UIIconModule } from '@shared/ui-components/icon/ui-icon.module';\nimport { UIToolbarModule } from '@shared/ui-components/toolbar/ui-toolbar.module';\nimport { UIFeedbackCardModule } from '../../shared/ui-components/feedback-card/feedback-card.module';\nimport { BannerModule } from './components/banner/banner.module';\nimport { CategoryFilterComponent } from './components/category-filter/category-filter.component';\nimport { EmptyFeedbacksModule } from './components/empty-feedbacks/empty-feedbacks.module';\nimport { SuggestionsLayoutComponent } from './layout/suggestions-layout.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: SuggestionsLayoutComponent,\n        pathMatch: 'full',\n    },\n];\n\n@NgModule({\n    declarations: [SuggestionsLayoutComponent, CategoryFilterComponent],\n    imports: [\n        CommonModule,\n        RouterModule.forChild(routes),\n        ReactiveFormsModule,\n        UICounterModule,\n        UIBadgeModule,\n        UIChipsModule,\n        UIIconModule,\n        UIToolbarModule,\n        UIButtonModule,\n        UIFeedbackCardModule,\n        EmptyFeedbacksModule,\n        BannerModule,\n        TranslocoModule,\n    ],\n    exports: [RouterModule],\n})\nexport class SuggestionsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CategoryFilterComponent"
                        },
                        {
                            "name": "SuggestionsLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BannerModule"
                        },
                        {
                            "name": "EmptyFeedbacksModule"
                        },
                        {
                            "name": "UIBadgeModule"
                        },
                        {
                            "name": "UIButtonModule"
                        },
                        {
                            "name": "UIChipsModule"
                        },
                        {
                            "name": "UICounterModule"
                        },
                        {
                            "name": "UIFeedbackCardModule"
                        },
                        {
                            "name": "UIIconModule"
                        },
                        {
                            "name": "UIToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslocoRootModule",
            "id": "module-TranslocoRootModule-5ccb1d6465eb1b52a67b732370bfd47d524e05ce79443df804d1c0bb0c4a731098685225f6c5f9948c22acb9d91ec3969fb7b1cebee4dc5fb5a9bd120d939b26",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/transloco-root.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule\n} from '@ngneat/transloco';\nimport { Injectable, NgModule } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [ TranslocoModule ],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en'],\n        defaultLang: 'en',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      })\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader }\n  ]\n})\nexport class TranslocoRootModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIBadgeModule",
            "id": "module-UIBadgeModule-26443416a6ee21904b0ced545d624e2806b7f8f7d124ce4be3b6151b94c2c1cb9e5c5028093b025b84433de3165c3d059df834df09f969f74b1afe0e318e9717",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/badge/ui-badge.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIBadgeDirective } from './ui-badge.directive';\n\n@NgModule({\n    declarations: [UIBadgeDirective],\n    imports: [CommonModule],\n    exports: [UIBadgeDirective],\n})\nexport class UIBadgeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIBadgeDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIBadgeDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIButtonModule",
            "id": "module-UIButtonModule-5624d3f7ae4bee359df21c4d4775dacdee806f6063ed9c9ac3ea9b808ec8265c2de051bfac6aad168c8dd8873562aebf20bd306dfcf42ec58360fbad6602207e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/button/ui-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIButtonDirective } from './ui-button.directive';\n\n@NgModule({\n    declarations: [UIButtonDirective],\n    imports: [CommonModule],\n    exports: [UIButtonDirective],\n})\nexport class UIButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIButtonDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIButtonDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIChipsModule",
            "id": "module-UIChipsModule-ee2f5a81a82cc10a654d4d49dcabb5688b7ff6a01ccb88185cf7586dc62095326d63f22f0a84d4b767271df49f7afd36702f74d113e820cbb441413df9cbc321",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/chips/ui-chips.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UIChipListComponent } from './chip-list/ui-chip-list.component';\nimport { UIChipComponent } from './chip/ui-chip.component';\n\n@NgModule({\n    declarations: [UIChipComponent, UIChipListComponent],\n    imports: [CommonModule],\n    exports: [UIChipComponent, UIChipListComponent],\n})\nexport class UIChipsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIChipComponent"
                        },
                        {
                            "name": "UIChipListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIChipComponent"
                        },
                        {
                            "name": "UIChipListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UICounterModule",
            "id": "module-UICounterModule-bde5708b6e39519a3828e75b1eeb3dab7033eaf63ac0f30c787756c3f8484cf68605b7c1a0b2e8c6c9c1ec39a9cc335761d13d76e38a872a255dc6eae04fba59",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/counter/ui-counter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UICounterComponent } from './ui-counter.component';\n\n@NgModule({\n    declarations: [UICounterComponent],\n    imports: [CommonModule],\n    exports: [UICounterComponent],\n})\nexport class UICounterModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UICounterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UICounterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIDividerModule",
            "id": "module-UIDividerModule-f803bc100ea5449d4ea82465d34a4723c8515b9c95b1a9cbef6de23912556bda5df85ec8e56eb8580b3fd90e149ed4803a804b13706603990ec98a71b5b37bf1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/divider/ui-divider.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIDividerComponent } from './ui-divider.component';\n\n@NgModule({\n    declarations: [UIDividerComponent],\n    imports: [CommonModule],\n    exports: [UIDividerComponent],\n})\nexport class UIDividerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIDividerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIDividerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIFeedbackCardModule",
            "id": "module-UIFeedbackCardModule-730eda270bac369bddc4006f2aaf4626fe8dbb48a9693f724dc5674fe93f87f30d82ce5de41092379b50d282efc2163c6f68070c3a59d2c78ca633ed807c8785",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/feedback-card/feedback-card.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FeedbackCardComponent } from './feedback-card.component';\nimport {\n    FeedbackCardContentDirective,\n    FeedbackCardFooterDirective,\n    FeedbackCardSideDirective,\n    FeedbackCardTitleDirective,\n} from './feeed-card.directive';\n\n@NgModule({\n    declarations: [\n        FeedbackCardComponent,\n        FeedbackCardContentDirective,\n        FeedbackCardFooterDirective,\n        FeedbackCardTitleDirective,\n        FeedbackCardSideDirective,\n    ],\n    imports: [CommonModule],\n    exports: [\n        FeedbackCardComponent,\n        FeedbackCardContentDirective,\n        FeedbackCardFooterDirective,\n        FeedbackCardTitleDirective,\n        FeedbackCardSideDirective,\n    ],\n})\nexport class UIFeedbackCardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FeedbackCardComponent"
                        },
                        {
                            "name": "FeedbackCardContentDirective"
                        },
                        {
                            "name": "FeedbackCardFooterDirective"
                        },
                        {
                            "name": "FeedbackCardSideDirective"
                        },
                        {
                            "name": "FeedbackCardTitleDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FeedbackCardComponent"
                        },
                        {
                            "name": "FeedbackCardContentDirective"
                        },
                        {
                            "name": "FeedbackCardFooterDirective"
                        },
                        {
                            "name": "FeedbackCardSideDirective"
                        },
                        {
                            "name": "FeedbackCardTitleDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIIconModule",
            "id": "module-UIIconModule-fb2b88fb7105f241de7c1ca47ad8d60ca24ce8c07d37b91dbe9d7183536be3982c7a7ebb07ec618e9035cc0866621d33ffe13eb64542f94e6905a2463ab53269",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/icon/ui-icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIIconComponent } from './ui-icon.component';\n\n@NgModule({\n    declarations: [UIIconComponent],\n    imports: [CommonModule],\n    exports: [UIIconComponent],\n})\nexport class UIIconModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIInputModule",
            "id": "module-UIInputModule-a3449a2bbd32a4af2b84d8abcb00c14c1390670c2ced7cd15b1951ebe6fb4120a977a4e67f7a1499e2d4f14634cede3f49a95f51bc3f38c6549fb1e7b36dcc48",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/input/ui-input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIInputDirective } from './ui-input.directive';\n\n@NgModule({\n    declarations: [UIInputDirective],\n    imports: [CommonModule],\n    exports: [UIInputDirective],\n})\nexport class UIInputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIInputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIInputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UISelectModule",
            "id": "module-UISelectModule-0bc0c5c706eaae6132fd113ee10a59d8a243b81eedae5a339152bbeb9fb50bd2ad560c42249679eb553d8a4f2823c1b0003ffe2cf7fd6c1118ebb52b1aa42d44",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/select/ui-select.module.ts",
            "methods": [],
            "sourceCode": "import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UISelectOptionComponent } from './select-option/ui-select-option.component';\nimport { UISelectPanelComponent } from './select-panel/ui-select-panel.component';\n\n@NgModule({\n    declarations: [UISelectPanelComponent, UISelectOptionComponent],\n    imports: [CommonModule, OverlayModule],\n    exports: [UISelectPanelComponent, UISelectOptionComponent],\n})\nexport class UISelectModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UISelectOptionComponent"
                        },
                        {
                            "name": "UISelectPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UISelectOptionComponent"
                        },
                        {
                            "name": "UISelectPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIToastModule",
            "id": "module-UIToastModule-eab97f9408a6821667c4c41e2b1ed8e7575ab5aed69f4c34af64cbc62990db3b6b511039ba4df66ba8dc865fa2aca5c3250f4bf95d8a0e338cf711b593d98f47",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/toast/ui-toast.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIToastComponent } from './ui-toast.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\n@NgModule({\n    declarations: [UIToastComponent],\n    imports: [CommonModule, OverlayModule],\n    exports: [UIToastComponent],\n})\nexport class UIToastModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIToastComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIToastComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIToolbarModule",
            "id": "module-UIToolbarModule-9ad03999a5527f0e14eee121a8c2eb1eb6024c3eaa98f47c79fa806dfc40c251882afddb680a34ad56e9f6964b2ca3e29e30bf14f70165bb7d87399024ca7728",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/toolbar/ui-toolbar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIToolbarComponent } from './ui-toolbar.component';\n\n@NgModule({\n    declarations: [UIToolbarComponent],\n    imports: [CommonModule],\n    exports: [UIToolbarComponent],\n})\nexport class UIToolbarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/chips/stories/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "configureTests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "test-config.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
            },
            {
                "name": "endpoints",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/http/endpoints.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    users: `${environment.apiUrl}/users`,\n    comments: `${environment.apiUrl}/comments`,\n    feedbacks: `${environment.apiUrl}/feedbacks`,\n    replies: `${environment.apiUrl}/replies`,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false,\n\n    apiUrl: 'http://localhost:3000/api/v1',\n}"
            },
            {
                "name": "fadeInOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/animations/fade.animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('fadeInOut', [\n    transition(':enter', [style({ opacity: 0 }), animate('.3s ease-out', style({ opacity: 1 }))]),\n    transition(':leave', [animate('.3s ease-in', style({ opacity: 0 }))]),\n])"
            },
            {
                "name": "ICONS_BASE_PATH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/icon/ui-icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/assets/images/icons'"
            },
            {
                "name": "JUSTIFY_CSS_CLASES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    start: 'ui-toolbar--start',\n    end: 'ui-toolbar--end',\n    center: 'ui-toolbar--center',\n    between: 'ui-toolbar--between',\n    around: 'ui-toolbar--around',\n}"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setup-jest.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UIButtonDirective>",
                "defaultValue": "(args: UIButtonDirective) => ({\n    props: args,\n    moduleMetadata: {\n        declarations: [UIButtonDirective],\n        imports: [CommonModule],\n    },\n    template: `<button ui-button [color]=\"color\" [size]=\"size\">Button</button>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/chips/stories/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UIChipComponent>",
                "defaultValue": "(args: UIChipComponent) => ({\n    props: args,\n    moduleMetadata: {\n        declarations: [UIChipComponent],\n        imports: [CommonModule],\n    },\n    template: `<ui-chip>Chip</ui-chip>`,\n})"
            },
            {
                "name": "UI_TOAST_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/toast/ui-toast-tokens.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<UIToastData>('TOAST_DATA')"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonColors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"light\" | \"dark\" | \"error\" | \"default\"",
                "file": "src/app/shared/ui-components/button/ui-button.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"long\" | \"default\"",
                "file": "src/app/shared/ui-components/button/ui-button.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"submit\" | \"reset\"",
                "file": "src/app/shared/ui-components/button/ui-button.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "CompilerOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "test-config.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "ConfigureFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "test-config.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "JusfityType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"start\" | \"end\" | \"center\" | \"between\" | \"around\"",
                "file": "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "UIToastPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"top-center\" | \"bottom-center\" | \"center\"",
                "file": "src/app/shared/ui-components/toast/ui-toast-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/shared/ui-components/button/button.stories.ts": [
                {
                    "name": "Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UIButtonDirective>",
                    "defaultValue": "(args: UIButtonDirective) => ({\n    props: args,\n    moduleMetadata: {\n        declarations: [UIButtonDirective],\n        imports: [CommonModule],\n    },\n    template: `<button ui-button [color]=\"color\" [size]=\"size\">Button</button>`,\n})"
                }
            ],
            "src/app/shared/ui-components/chips/stories/chip.stories.ts": [
                {
                    "name": "Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/chips/stories/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/chips/stories/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UIChipComponent>",
                    "defaultValue": "(args: UIChipComponent) => ({\n    props: args,\n    moduleMetadata: {\n        declarations: [UIChipComponent],\n        imports: [CommonModule],\n    },\n    template: `<ui-chip>Chip</ui-chip>`,\n})"
                }
            ],
            "test-config.helper.ts": [
                {
                    "name": "configureTests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "test-config.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
                }
            ],
            "src/app/core/http/endpoints.ts": [
                {
                    "name": "endpoints",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/http/endpoints.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    users: `${environment.apiUrl}/users`,\n    comments: `${environment.apiUrl}/comments`,\n    feedbacks: `${environment.apiUrl}/feedbacks`,\n    replies: `${environment.apiUrl}/replies`,\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n\n    apiUrl: 'http://localhost:3000/api/v1',\n}"
                }
            ],
            "src/app/shared/ui-components/animations/fade.animation.ts": [
                {
                    "name": "fadeInOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/animations/fade.animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('fadeInOut', [\n    transition(':enter', [style({ opacity: 0 }), animate('.3s ease-out', style({ opacity: 1 }))]),\n    transition(':leave', [animate('.3s ease-in', style({ opacity: 0 }))]),\n])"
                }
            ],
            "src/app/shared/ui-components/icon/ui-icon.component.ts": [
                {
                    "name": "ICONS_BASE_PATH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/icon/ui-icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/assets/images/icons'"
                }
            ],
            "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts": [
                {
                    "name": "JUSTIFY_CSS_CLASES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    start: 'ui-toolbar--start',\n    end: 'ui-toolbar--end',\n    center: 'ui-toolbar--center',\n    between: 'ui-toolbar--between',\n    around: 'ui-toolbar--around',\n}"
                }
            ],
            "setup-jest.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setup-jest.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
                }
            ],
            "src/app/shared/ui-components/toast/ui-toast-tokens.ts": [
                {
                    "name": "UI_TOAST_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/toast/ui-toast-tokens.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<UIToastData>('TOAST_DATA')"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/shared/ui-components/button/ui-button.directive.ts": [
                {
                    "name": "ButtonColors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"light\" | \"dark\" | \"error\" | \"default\"",
                    "file": "src/app/shared/ui-components/button/ui-button.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"long\" | \"default\"",
                    "file": "src/app/shared/ui-components/button/ui-button.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"submit\" | \"reset\"",
                    "file": "src/app/shared/ui-components/button/ui-button.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "test-config.helper.ts": [
                {
                    "name": "CompilerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "test-config.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "ConfigureFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "test-config.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts": [
                {
                    "name": "JusfityType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"start\" | \"end\" | \"center\" | \"between\" | \"around\"",
                    "file": "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/shared/ui-components/toast/ui-toast-data.ts": [
                {
                    "name": "UIToastPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"top-center\" | \"bottom-center\" | \"center\"",
                    "file": "src/app/shared/ui-components/toast/ui-toast-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./modules/suggestions/suggestions.module#SuggestionsModule"
                    },
                    {
                        "path": "feedback",
                        "loadChildren": "./modules/feedback/feedback.module#FeedbackModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/feedback/feedback.module.ts",
                                        "module": "FeedbackModule",
                                        "children": [
                                            {
                                                "path": "detail/:id",
                                                "component": "FeedbackDetailComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "FeedbackModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/modules/suggestions/suggestions.module.ts",
                "module": "SuggestionsModule",
                "children": [
                    {
                        "path": "",
                        "component": "SuggestionsLayoutComponent",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "setup-jest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/comment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "endpoints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/feedback.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FeedbackService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/reply.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReplyService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/comment.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Comment",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/feedback.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Feedback",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/reply.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Reply",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/feedback/components/back-btn/back-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackBtnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/feedback/layouts/feedback-detail/feedback-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedbackDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/suggestions/components/banner/banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/suggestions/components/banner/banner.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BannerSubtitleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/suggestions/components/banner/banner.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BannerTitleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/suggestions/components/category-filter/category-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/suggestions/components/empty-feedbacks/empty-feedbacks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmptyFeedbacksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/suggestions/components/empty-feedbacks/empty-feedbacks.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "EmptyFeedbacksBodyDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/suggestions/components/empty-feedbacks/empty-feedbacks.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "EmptyFeedbacksTitleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/suggestions/layout/suggestions-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SuggestionsLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/animations/fade.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fadeInOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/badge/ui-badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UIBadgeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/button/ui-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UIButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/chips/chip-list/ui-chip-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UIChipListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/chips/chip/ui-chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UIChipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/chips/stories/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/chips/stories/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/counter/ui-counter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UICounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/divider/ui-divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UIDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/feedback-card/feedback-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedbackCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/feedback-card/feeed-card.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FeedbackCardContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/feedback-card/feeed-card.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FeedbackCardFooterDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/feedback-card/feeed-card.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FeedbackCardSideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/feedback-card/feeed-card.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FeedbackCardTitleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/icon/ui-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UIIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/icon/ui-icon.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICONS_BASE_PATH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/input/ui-input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UIInputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/select/select-option/ui-select-option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UISelectOptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/select/select-panel/ui-select-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UISelectPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/select/ui-select.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UiSelectService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/toast/ui-toast-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UIToastData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/toast/ui-toast-ref.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UIToastRef",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/toast/ui-toast-tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UI_TOAST_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/toast/ui-toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UIToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/toast/ui-toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UIToastService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UIToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/toolbar/ui-toolbar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JUSTIFY_CSS_CLASES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/transloco-root.module.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslocoHttpLoader",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "test-config.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configureTests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}